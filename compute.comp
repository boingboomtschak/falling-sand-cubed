#version 430

const int GRID_SIZE = 64;

layout(local_size_x = 1, local_size_y = 1, local_size_z = 1) in;
layout(std430, binding=0) buffer src_buffer {
	uint srcGrid[GRID_SIZE][GRID_SIZE][GRID_SIZE];
}; 
layout (std430, binding=1) buffer dst_buffer {
	uint dstGrid[GRID_SIZE][GRID_SIZE][GRID_SIZE];
};

// Particle types
const int P_AIR = 0;
const int P_STONE = 1;
const int P_WATER = 2;
const int P_SAND = 3;
const int P_OIL = 4;
const int P_SALT = 5;

uniform int rngSeed;

ivec3 inv = ivec3(gl_GlobalInvocationID);

// Generating simplex 3D noise, code by Ian McEwan
vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
float snoise(vec3 v){ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0);
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);
  vec3 i  = floor(v + dot(v, C.yyy));
  vec3 x0 =   v - i + dot(i, C.xxx);
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;
  i = mod(i, 289.0 ); 
  vec4 p = permute( permute( permute(i.z + vec4(0.0, i1.z, i2.z, 1.0)) + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));
  float n_ = 1.0/7.0; // N=7
  vec3  ns = n_ * D.wyz - D.xzx;
  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)
  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)
  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);
  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );
  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));
  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}

void shuffleMoves(inout uint[4] arr) {
	for (uint i = 0; i < 4; i++) {
		uint a = uint(floor(snoise(vec3(rngSeed + inv.x, inv.z, inv.y + i)) * 3.0));
		uint b = uint(floor(snoise(vec3(rngSeed + inv.z, inv.x, inv.y - i)) * 3.0));
		uint c = arr[a];
		arr[a] = arr[b];
		arr[b] = c;
	}
}

bool isLiquid(uint p) {
	switch (p) {
		case P_WATER:
			return true;
		case P_OIL:
			return true;
	}
	return false;
}

bool isMovableSolid(uint p) {
	switch(p) {
		case P_SAND:
			return true;
		case P_SALT:
			return true;
	}
	return false;
}

bool isImmovableSolid(uint p) {
	switch(p) {
		case P_STONE:
			return true;
	}
	return false;
}

bool isGas(uint p) {
	return false;
}

void processLiquids(uint x, uint y, uint z) {
	uint p = srcGrid[x][y][z];
	// Try to move down
	if (y > 0) {
		uint np = srcGrid[x][y-1][z];
		if (np == P_AIR || isGas(np)) {
			uint wp = atomicCompSwap(dstGrid[x][y-1][z], np, p);
			if (wp == np) {
				atomicExchange(dstGrid[x][y][z], np);
				return;
			}
		}
	}
	// Else, try to move sideways
	uint[4] moves;
	for (uint i = 0; i < 4; i++) moves[i] = i;
	shuffleMoves(moves);
	for (uint m = 0; m < 4; m++) {
		ivec3 move;
		switch(moves[m]) {
			case 0:
				move = ivec3(x - 1, y, z);
				break;
			case 1:
				move = ivec3(x + 1, y, z);
				break;
			case 2:
				move = ivec3(x, y, z - 1);
				break;
			case 3:
				move = ivec3(x, y, z + 1);
				break;
		}
		if (move.x >= 0 && move.x < GRID_SIZE && move.z >= 0 && move.z < GRID_SIZE) {
			uint np = srcGrid[move.x][move.y][move.z];
			if (np == P_AIR || isGas(np)) {
				uint wp = atomicCompSwap(dstGrid[move.x][move.y][move.z], np, p);
				if (wp == np) {
					atomicExchange(dstGrid[x][y][z], np);
					return;
				}
			}
		}
	}
}

void processMovableSolids(uint x, uint y, uint z) {
	uint p = srcGrid[x][y][z];
	if (y > 0) {
		// Try to move down
		uint np = srcGrid[x][y-1][z];
		if (np == P_AIR || isLiquid(np) || isGas(np)) {
			uint wp = atomicCompSwap(dstGrid[x][y-1][z], np, p);
			if (wp == np) {
				atomicExchange(dstGrid[x][y][z], np);
				return;
			}
		}
		// Else, move diagonal downwards (if possible)
		for (int nx = -1; nx <= 1; nx++) {
			for (int nz = -1; nz <= 1; nz++) {
				if ((nx != 0 || nz != 0) && x + nx < GRID_SIZE && x + nx >= 0 && z + nz < GRID_SIZE && z + nz >= 0) {
					uint np = srcGrid[x + nx][y-1][z + nz];
					if (np == P_AIR || isLiquid(np) || isGas(np)) {
						uint wp = atomicCompSwap(dstGrid[x + nx][y - 1][z + nz], np, p);
						if (wp == np) {
							atomicExchange(dstGrid[x][y][z], np);
							return;
						}
					}
				}
			}
		}
	}
}

void processImmovableSolids(uint x, uint y, uint z) {

}

void processGases(uint x, uint y, uint z) {
	
}

void main() {
	uint p = srcGrid[inv.x][inv.y][inv.z];
	if (isLiquid(p)) {
		processLiquids(inv.x, inv.y, inv.z);
	} else if (isMovableSolid(p)) {
		processMovableSolids(inv.x, inv.y, inv.z);
	} else if(isImmovableSolid(p)) {
		processImmovableSolids(inv.x, inv.y, inv.z);
	} else if (isGas(p)) {
		processGases(inv.x, inv.y, inv.z);
	}
}

